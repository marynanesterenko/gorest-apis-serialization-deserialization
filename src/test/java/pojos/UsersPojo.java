package pojos;

import com.google.gson.annotations.Expose;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/*
    1. Below are the Lombok annotations. Lombok is an annotation-based Java library, which allows to reduce the repetitive code.
    2. By using Lombok annotations in this class we are avoiding manually writing the getters and setters
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor

// The goal is to not hardcode the body of the Object we are trying to create,
// therefore - we create the POJO Classes for our Objects, which will serve as a design template for our future Object.
// Later in the "RESTUsers.java" Class we will create an Object of this Class and pass the appropriate parameters to the UserPojo Constructor
public class UsersPojo {

    // 1. Declaring instance variables, which will be then instantiated upon User Object creation with the help of Constructor and "this." keyword.
    //    These variables, when instantiated, will define the State of a User Object, and will become it's private parameters.
    //    Some of them, such as "id" will be auto-generated by the Backend upon successful Object creation in the Database,
    //    therefore - we are excluding "id" field from being serialized before the transmission of the POST Request to the server, using the @Expose annotation and setting the proper condition:
    @Expose (serialize = false, deserialize = true)
    private int id;
    @Expose
    private String name;
    @Expose
    private String email;
    @Expose
    private String gender;
    @Expose
    private String status;

    // 2. Creating a parameterized "UsersPojo" Constructor, to instantiate the instance variables
    public UsersPojo(String name, String email, String gender, String status){
        this.name = name;
        this.email = email;
        this.gender = gender;
        this.status = status;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("UserPOJO{");
        sb.append("id=").append(id);
        sb.append(", name='").append(name).append('\'');
        sb.append(", email='").append(email).append('\'');
        sb.append(", gender='").append(gender).append('\'');
        sb.append(", status='").append(status).append('\'');
        sb.append('}');
        return sb.toString();
    }
}
